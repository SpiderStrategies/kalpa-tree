@import "bourbon";

$delay: 300ms;
$timing-fn: ease-out;

@mixin base-node() {
  list-style: none;
  position: absolute;
  width: 100%;
  height: 36px;
  top: 0;
  left: 0;
  overflow-x: hidden;
  @include transition-property(opacity);
  @include transition-duration($delay);
  @include transition-timing-function($timing-fn);

  .node-contents {
    padding: 11px 0px 10px;
    font-size: 13px;
    line-height: 1; // automatically the same as font size
    text-align: left;
    white-space: nowrap;

    svg.icon {
      display: inline-block;
      vertical-align: middle;
      margin-left: 2px;
      width: 12px;
      height: 11px;
    }

    .label {
      display: inline-block;
      vertical-align: middle;
      margin-left: 8px;
      color: #ADB8BC;
      text-shadow: 0 1px 0 rgba(0, 0, 0, 0.23);
    }
  }

  .label-mask {
    /* This is used to mask long label names on the nodes */
    position: absolute;
    width: 100px;
    height: 100%;
    top: 0;
    right: 0;

    &:after {
      content: "";
      position: absolute;
      width: 5px;
      height: 5px;
      top: 16px;
      right: 12px;
      border-radius: 50%;
    }
  }
}

.tree-container {
  position: relative;
  background-color: #393c40;
  width: 100%;
  height: 100%;

  .traveling-node {
    @include base-node;

    background-color: #D9E2E8;
    width: calc(#{"100% + 13px"});
    cursor: move;

    .node-contents {
      padding-left: 14px;
      @include transition-property(transform, opacity);
      @include transition-duration($delay);
      @include transition-timing-function($timing-fn);

      // Align with non traveling icons
      svg.icon {
        margin-left: 9px;
      }

      .label {
        color: #2d3135;
        @include transition-property(color);
        @include transition-duration($delay);
        @include transition-timing-function($timing-fn);
      }
    }

    .label-mask {
      @include background-image(linear-gradient(to right, rgba(57,60,64,0) 0%, #D9E2E8 90%));
    }

    &.illegal {
      opacity: .9 !important; // Override element's opacity style set in JS

      .node-contents {
        opacity: .7;

        .icon {
          fill: #3a4045;
        }

        .label {
          color: #3a4045;
        }
      }

      &:after {
        color: #f35132;
        background: #f35132;
        box-shadow: 0 0.25em 0 0 #f35132, 0 0.5em 0 0 #f35132;
      }
    }

    &:after {
      content: "";
      position: absolute;
      width: 12px;
      top: 13px;
      right: 10px;
      height: .1em;
      background: #7fe1f4;
      box-shadow: 0 0.25em 0 0 #7fe1f4, 0 0.5em 0 0 #7fe1f4;

      @include transition-property(background, box-shadow, color);
      @include transition-duration($delay);
      @include transition-timing-function($timing-fn);
    }

    .toggler, .indicator:after {
      display: none;
    }
  }

  .tree {
    overflow: auto;
    overflow-x: hidden;
    width: 100%;
    height: 100%;

    @include user-select(none);

    // Most tree functions that modify the dom send a callback into transitionWrap where has some magic
    // to determine whether or not we actually want transitions. It's in charge of adding the .transitions
    // class, executing the callback (which modifies the dom), then removes the class.
    &.transitions {
      ul {
        li.node {
           @include transition-property(transform, opacity, height);
           @include transition-duration($delay);
           @include transition-timing-function($timing-fn);
          .node-contents {
            @include transition-property(transform, opacity);
            @include transition-duration($delay);
            @include transition-timing-function($timing-fn);

            .toggler {
              @include transition(all $delay $timing-fn);
            }
          }
        }
      }
    }

    // Show the expand/collapse indicators on hover
    &:hover {
      // Don't show it for the root node on normal trees
      li.node:not(.root) {
        .toggler { opacity: 1; }
      }
    }

    ul {
      list-style-type: none;
      padding: 0px;
      margin: 0px;
      @include transform(translateX(0)); // Specify 0 transform, otherwise we get overflow on nodes

      li.node {
        @include base-node;
        cursor: pointer;

        &.transitioning-node {
          pointer-events: none;
        }

        .node-contents {
          .toggler {
            display: inline-block;
            vertical-align: middle;
            margin-right: 5px;
            width: 14px;
            height: 14px;
            opacity: 0;
            @include transform(rotate(-90deg));
            @include transform-origin(7px 7px);

            svg {
              position: absolute;
              width: 9px;
              height: 6px;
              top: 3px;
              right: 2px;
              fill: #818b8f;
            }

            &.expanded { @include transform(rotate(0deg)); }
            &.leaf { visibility: hidden !important; }
          }
        }

        .label-mask {
          @include background-image(linear-gradient(to right, rgba(57,60,64,0) 0%, #393c40 90%));

          &.indicator {
            @include background-image(linear-gradient(to right, rgba(57,60,64,0) 0%, #393c40 50%));
          }
        }

        &.placeholder {
          * {
            display: none;
          }
        }

        &.transient {
          pointer-events: none;
        }

        &.fading-node {
          height: 0; // either finishes or ends at 0
        }

        &.selected {
          background-color: #2d3135;
          z-index: 1;

          &:not(.placeholder):before {
            content: "";
            left: 0;
            position: absolute;
            width: 3px;
            height: 100%;
            background-color: #dde5e8;
          }

          svg.icon {
            fill: #e1e8eb;
          }
          .label { color: #E1E8EB; }
          .label-mask {
            @include background-image(linear-gradient(to right, rgba(45,49,53,0) 0%, #2d3135 90%));

            &.indicator {
              @include background-image(linear-gradient(to right, rgba(45,49,53,0) 0%, #2d3135 50%));
            }
          }
        }
      }
    }

    &.editable {
      &.dragging {
        li.node {
          &.selected.placeholder {
            background-color: inherit;
          }
          .toggler {
             opacity: 0 !important; // Never show the toggler when the user is dragging
          }
        }
      }

      &:not(.search-results) {
        li.node:not(.root):not(.transient) {
          cursor: move;

          &:hover {
            &:after {
              content: "";
              position: absolute;
              width: 5px;
              top: 14px;
              right: 0;
              height: .1em;
              background: #ADB8BC;
              box-shadow: 0 0.25em 0 0 #ADB8BC, 0 0.5em 0 0 #ADB8BC;
            }
          }
        }
      }

      li.node:not(.selected) {
        // Override opacity set in update.js
        opacity: .6 !important;
      }
    }

    &.forest-tree {
      .node .node-contents {
        padding-left: 8px;
      }
    }

    &.search-results {
      .toggler {
         opacity: 0 !important; // Never show the toggler when displaying search results
      }
    }
  }
}
